plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'java'
    id 'maven'
    id 'eclipse'
    id 'idea'
	id 'org.scm4j.releaser.scm4j-releaser-gradle-plugin' version '0.2.0'
}

configurations.compile {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
        cacheDynamicVersionsFor 0, 'seconds'
    }
}

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'org.scm4j'

ext.generatedResourcesDir = new File(buildDir, 'generated/resources')
ext.apiVersionFile = new File(generatedResourcesDir, 'org/scm4j/deployer/engine/scm4j-deployer-api-version')

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

dependencies {
    compile 'com.google.guava:guava:20.0'
    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    compile 'commons-io:commons-io:2.5'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'commons-cli:commons-cli:1.4'
    compile 'org.apache.maven.resolver:maven-resolver-api:1.1.0'
    compile 'org.apache.maven.resolver:maven-resolver-util:1.1.0'
    compile 'org.apache.maven.resolver:maven-resolver-spi:1.1.0'
    compile 'org.apache.maven.resolver:maven-resolver-impl:1.1.0'
    compile 'org.apache.maven.resolver:maven-resolver-connector-basic:1.1.0'
    compile 'org.apache.maven.resolver:maven-resolver-transport-file:1.1.0'
    compile 'org.apache.maven.resolver:maven-resolver-transport-http:1.1.0'
    compile 'org.apache.maven:maven-resolver-provider:3.5.0'

    compileOnly 'org.projectlombok:lombok:1.16.18'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.9.5'
}

jar {
    doFirst {
        apiVersionFile.parentFile.mkdirs()
        apiVersionFile.write(configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.find {
            it.moduleName == 'scm4j-deployer-api'
        }.moduleVersion)
    }
    from generatedResourcesDir
    manifest.attributes(
            'Specification-Title': project.name,
            'Specification-Version': version.replaceAll(/-SNAPSHOT$/, ''),
            'Implementation-Title': project.name,
            'Implementation-Version': "$version (${new Date().format('yyyy-MM-dd')})",
    )
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
